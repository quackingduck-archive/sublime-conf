# [PackageDev] target_format: plist, ext: tmLanguage
---
name: TOML
scopeName: source.toml
fileTypes: [toml,tml]
uuid: ffffeb76-439f-4c5e-b60f-d8a13606d63d

patterns:
- include: '#comments'

- include: '#tables'
- include: '#keys'

- include: '#illegal'

repository:
  comments:
    match: \s*((#).*)$
    captures:
      '1': {name: comment.line.number-sign.toml}
      '2': {name: punctuation.definition.comment.toml}
    comment: Comments
  
  tables:
    patterns:
    - name: invalid.illegal.table.array.toml
      begin: ^\s*(\[\[\]\]|\[\[\..*\]\]|\[\[.*\.\]\]|\[\[.*\.\..*\]\]|\[\[.*[\[\]#].*\]\]|\[\[.*\]\].+\n)
      end: (?=^\s*\[?\[.*\]\]?)
      comment: "non-empty etc. like tables, see below!"
    - name: meta.tag.table.array.toml
      begin: ^\s*(\[\[)([A-Za-z_][A-Za-z0-9_\.]*)(\]\])\s*
      beginCaptures:
        '1': {name: punctuation.definition.table.array.toml}
        '2': {name: entity.other.attribute-name.table.array.toml}
        '3': {name: punctuation.definition.table.array.toml}
      end: (?=^\s*\[?\[[A-Za-z_][A-Za-z0-9_\.]*\]\]?)
      comment: A named TOML-Table-Array
      patterns:
      - include: '#comments'
      - include: '#keys'
      - include: '#illegal'

    - name: invalid.illegal.table.toml
      begin: ^\s*(\[\]|\[\..*\]|\[.*\.\]|\[.*\.\..*\]|\[.*[\[\]#].*\]|\[.*\].+\n)
      end: (?=^\s*\[?\[.*\]\]?)
      comment: "Each table name segment must be non-empty, must not contain the characters '[', ']' or '#' and is delimited by a '.'.  Tables \"appear in square brackets *on a line by themselves*\""
    - name: meta.tag.table.toml
      begin: ^\s*(\[)([A-Za-z_][A-Za-z0-9_\.]*)(\])\s*
      beginCaptures:
        '1': {name: punctuation.definition.table.toml}
        '2': {name: entity.other.attribute-name.table.toml}
        '3': {name: punctuation.definition.table.toml}
      end: (?=^\s*\[?\[[A-Za-z_][A-Za-z0-9_\.]*\]\]?)
      comment: A named TOML-Table
      patterns:
      - include: '#comments'
      - include: '#keys'
      - include: '#illegal'
      
  keys:
    patterns:
    - name: invalid.illegal.noKeyDefined.toml
      match: ^(\s*=.*)$
      comment: Assignments without key are invalid
    - name: invalid.deprecated.noValueGiven.toml
      match: ^(\s*[A-Za-z_][A-Za-z0-9_]*\s*=)(?=\s*$)
      comment: Assignments without value are unusual
    - begin: '^\s*([A-Za-z_-][A-Za-z0-9_-]*|".+")\s*(=)\s*'
      end: ($|(?==))
      beginCaptures:
        '1': {name: keyword.key.toml}
        '2': {name: punctuation.definition.keyValuePair.toml}
      patterns:
      - include: '#comments'
      - include: '#dataTypes'
      - include: '#illegal'
    comment: Key-value pairs

  dataTypes:
    patterns:
    - include: '#array'
    - include: '#string'
    - include: '#dateTime'
    - include: '#float'
    - include: '#integer'
    - include: '#boolean'

  string:
    patterns:
    - name: string.quoted.triple.literal.block.toml
      begin: "'''"
      end: "'''"
      comment: literal string block (no escape sequences)
    - name: string.quoted.single.literal.line.toml
      match: "'.*?'"
      comment: literal string line (no escape sequences)
    - name: string.quoted.triple.basic.block.toml
      begin: '"""'
      patterns:
      - name: string.quoted.triple.basic.block.toml
        match: '[^"\\]*(?:\\.?[^"\\]*)*'
      end: '"""'
      comment: basic string block
    - name: string.quoted.single.basic.line.toml
      match: '"[^"\\]*(?:\\.[^"\\]*)*"'
      comment: basic string line

  dateTime:
    match: (?<!\w)(\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|[\+\-]\d{2}:\d{2}))(?!\w)
    captures:
      '1': {name: constant.other.datetime.toml}
    comment: DateTime

  float:
    match: (?<!\w)([\+\-]?(?:[1-9][0-9]*|0)(?:(?:\.[0-9]*)?[eE][\+\-]?[1-9][0-9]*|(?:\.[0-9]*)))(?!\w)
    captures:
      '1': {name: constant.numeric.float.toml}
    comment: Float, decimal and exponential representation

  integer:
    match: (?<!\w)((?:[\+\-]?[1-9][0-9]*|0))(?!\w)
    captures:
      '1': {name: constant.numeric.integer.toml}
    comment: Integer (with and without + and - prefixes)

  boolean:
    match: (?<!\w)(true|false)(?!\w)
    captures:
      '1': {name: constant.other.boolean.toml}
    comment: Boolean

  array:
    begin: (?<!\w)(\[)\s*
    beginCaptures:
      '1': {name: punctuation.definition.array.toml}
    end: \s*(\])(?!\w)
    endCaptures:
      '1': {name: punctuation.definition.array.toml}
    patterns:
    - include: '#comments'
    - include: '#dataTypes'
    comment: Array

  illegal:
    match: (.*)
    captures:
      '1': {name: invalid.illegal.toml}
    comment: Invalid things -> everything unmatched
...
